#pragma once
#include <opencv.hpp>
#include <iostream>
#include <fstream>
#include "tinyxml2.h"  

/*   
*   [Info]
*   This is a class object that reads camera parameter xml file generated by the calibration tool <GML Camera Calibration>
*   You can downlaod the tool at http://graphics.cs.msu.ru/en/node/909
*   Once xml file is generated, you can use this code to load camera parameters easily
*
*   [Requisite]
*   You must include the followings in your project
*      -  tinyxml2.h
*      -  tinyxml2.cpp
*
*   [Usage]
*   Then, include "cameraParam.h" in your main cpp file
*      - To read from xml file, simply pass 'file path/name'
*         ex)  cameraParam param("calibInfo_test.xml");
*
*      - You can get following information : intrinsic matrix(Mint), distortion coefficient(distCoeffs)
*         ex)  intrinsic = param.Mint
*              distcoeffs= param.distCoeffs
*
*      - In order to get undistorted image, Just pass src image. 
*         ex)  undistorted = param.undistort(src);
*
*/



class cameraParam
{ 
	cv::Mat  Mext, rotMat, transMat;
	double scale;
	double fx, fy, cx, cy, k1, k2, p1, p2;
	void readParamCSV(void);
	void readParamXML(std::string file);
	void setMint(void);
	void setDistCoeffs(void);
	std::string fileNameCSV;
	std::string fileNameXML;

public:
	cameraParam(std::string file);
	cv::Mat Mint, distCoeffs;

	// Undistort image
	void undistort(cv::Mat src, cv::Mat &out);
	cv::Mat undistort(cv::Mat src);
	
};


//**********************************************************
cameraParam::cameraParam(std::string file)
{
	if (file.substr(file.find_last_of(".") + 1) == "csv")
	{
		fileNameCSV = file;
		std::cout << "reading CSV file..." << std::endl;
		readParamCSV();
	}
	else if (file.substr(file.find_last_of(".") + 1) == "xml")
	{
		fileNameXML = file;
		std::cout << "reading XML file..." << std::endl;
		readParamXML(file);
	}

	setMint();
	setDistCoeffs();
}




//**********************************************************
//--> This Undistorts Image
//    Input parameters : cv::Mat src , cv::Mat undistorted
void cameraParam::undistort(cv::Mat src, cv::Mat &undistorted)
{
	cv::undistort(src, undistorted, Mint, distCoeffs);
}

//--> This Undistorts Image
//    Input parameter  : cv::Mat src 
//    return: cv::Mat undistorted
cv::Mat cameraParam::undistort(cv::Mat src)
{
	cv::Mat undistorted;
	cv::undistort(src, undistorted, Mint, distCoeffs);
	return undistorted;
}


//**********************************************************
 

void cameraParam::readParamXML(std::string file)
{
	tinyxml2::XMLDocument doc;
	doc.LoadFile(file.c_str());

	tinyxml2::XMLElement* root = doc.FirstChildElement("CalibrationProject")->FirstChildElement("results");
	//tinyxml2::XMLElement* data = root->FirstChildElement("focus_lenX");
 
	fx = atof((char*)root->FirstChildElement("focus_lenX")->GetText());
	fy = atof((char*)root->FirstChildElement("focus_lenY")->GetText());
	cx = atof((char*)root->FirstChildElement("PrincipalX")->GetText());
	cy = atof((char*)root->FirstChildElement("PrincipalY")->GetText());
	k1 = atof((char*)root->FirstChildElement("Dist1")->GetText());
	k2 = atof((char*)root->FirstChildElement("Dist2")->GetText());
	p1 = atof((char*)root->FirstChildElement("Dist3")->GetText());
	p2 = atof((char*)root->FirstChildElement("Dist4")->GetText());


	// Print cameraParam
	std::cout << "**---- Camera Parameters ----**" << std::endl;
	std::cout << "fx: " << fx << ",  fy: " << fy << std::endl;
	std::cout << "cx: " << cx << ",  cy: " << cy << std::endl;
	std::cout << "k1: " << k1 << ",  k2: " << k2 << std::endl;
	std::cout << "p1: " << p1 << ",  p2: " << p2 << std::endl;

	doc.~XMLDocument();
}
//**********************************************************
void cameraParam::readParamCSV(void)
{
	std::ifstream file(fileNameCSV);

	//check if file opened 
	if (!file)
	{
		std::cerr << "***ERROR*** Failed to load camera parameters!!" << std::endl;
		std::cerr << "-->> Unable to open file("<< fileNameCSV<<") !!" << std::endl;
		cv::waitKey(0);
		exit(-1);
	}
	else{
		std::string line;
		int line_number_ROW = 1;
		int line_number_COL = 1;
		double temp;

		while (std::getline(file, line))   //getline  included in <fstream>
		{
			if (line_number_ROW > 1)  // Skip the 1st row and read data from 2nd row
			{
				std::istringstream iss(line);  //istringstream  included in <sstream>
				std::string result;
				while (std::getline(iss, result, ','))
				{
					if (result.empty())
					{
						std::cerr << "***ERROR*** Failed to load camera parameters!!" << std::endl;
						std::cerr << "-->> Missing data in file("<< fileNameCSV <<")__column #." << line_number_COL << " !!" << std::endl;
						cv::waitKey(0);
						exit(-1);
					}
					else
					{
						std::stringstream convertor(result);
						convertor >> temp;

						switch (line_number_COL)
						{
						case 1:
							fx = temp;
							break;
						case 2:
							fy = temp;
							break;
						case 3:
							cx = temp;
							break;
						case 4:
							cy = temp;
							break;
						case 5:
							k1 = temp;
							break;
						case 6:
							k2 = temp;
							break;
						case 7:
							p1 = temp;
							break;
						case 8:
							p2 = temp;
							break;
						}

						line_number_COL++;
					}
				}
			}

			line_number_ROW++;
		}
	}
 
	// Print cameraParam
	std::cout << "**---- Camera Parameters ----**" << std::endl;
	std::cout << "fx: " << fx << ",  fy: " << fy << std::endl;
	std::cout << "cx: " << cx << ",  cy: " << cy << std::endl;
	std::cout << "k1: " << k1 << ",  k2: " << k2 << std::endl;
	std::cout << "p1: " << p1 << ",  p2: " << p2 << std::endl;
}
 
void cameraParam::setMint(void)
{
	Mint = cv::Mat::eye(3, 3, CV_64F);
	Mint.at<double>(0, 0) = fx;
	Mint.at<double>(0, 2) = cx;
	Mint.at<double>(1, 1) = fy;
	Mint.at<double>(1, 2) = cy;
}


void cameraParam::setDistCoeffs()
{
	distCoeffs = cv::Mat::zeros(4, 1, CV_64F);
	distCoeffs.at<double>(0, 0) = k1;
	distCoeffs.at<double>(1, 0) = k2;
	distCoeffs.at<double>(2, 0) = p1;
	distCoeffs.at<double>(3, 0) = p2;
}
 